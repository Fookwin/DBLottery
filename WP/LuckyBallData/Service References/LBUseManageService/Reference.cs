//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace LuckyBallData.LBUseManageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LBUseManageService.IUseControlService")]
    public interface IUseControlService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUseControlService/UserLogin", ReplyAction="http://tempuri.org/IUseControlService/UserLoginResponse")]
        System.IAsyncResult BeginUserLogin(string devId, int platform, int clientVersion, string info, System.AsyncCallback callback, object asyncState);
        
        void EndUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUseControlService/GetLatestSoftwareVersion", ReplyAction="http://tempuri.org/IUseControlService/GetLatestSoftwareVersionResponse")]
        System.IAsyncResult BeginGetLatestSoftwareVersion(int platform, ref int version, ref bool forceUpgradingRequired, System.AsyncCallback callback, object asyncState);
        
        void EndGetLatestSoftwareVersion(ref int version, ref bool forceUpgradingRequired, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUseControlService/GetReleaseNotes", ReplyAction="http://tempuri.org/IUseControlService/GetReleaseNotesResponse")]
        System.IAsyncResult BeginGetReleaseNotes(int platform, int clientVersion, System.AsyncCallback callback, object asyncState);
        
        string EndGetReleaseNotes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUseControlService/PostFeedback", ReplyAction="http://tempuri.org/IUseControlService/PostFeedbackResponse")]
        System.IAsyncResult BeginPostFeedback(string feedback, System.AsyncCallback callback, object asyncState);
        
        void EndPostFeedback(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUseControlService/PostRecord", ReplyAction="http://tempuri.org/IUseControlService/PostRecordResponse")]
        System.IAsyncResult BeginPostRecord(string record, System.AsyncCallback callback, object asyncState);
        
        void EndPostRecord(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUseControlServiceChannel : LuckyBallData.LBUseManageService.IUseControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestSoftwareVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestSoftwareVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int version {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public bool forceUpgradingRequired {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReleaseNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReleaseNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UseControlServiceClient : System.ServiceModel.ClientBase<LuckyBallData.LBUseManageService.IUseControlService>, LuckyBallData.LBUseManageService.IUseControlService {
        
        private BeginOperationDelegate onBeginUserLoginDelegate;
        
        private EndOperationDelegate onEndUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestSoftwareVersionDelegate;
        
        private EndOperationDelegate onEndGetLatestSoftwareVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestSoftwareVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReleaseNotesDelegate;
        
        private EndOperationDelegate onEndGetReleaseNotesDelegate;
        
        private System.Threading.SendOrPostCallback onGetReleaseNotesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostFeedbackDelegate;
        
        private EndOperationDelegate onEndPostFeedbackDelegate;
        
        private System.Threading.SendOrPostCallback onPostFeedbackCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostRecordDelegate;
        
        private EndOperationDelegate onEndPostRecordDelegate;
        
        private System.Threading.SendOrPostCallback onPostRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UseControlServiceClient() {
        }
        
        public UseControlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UseControlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UseControlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UseControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UserLoginCompleted;
        
        public event System.EventHandler<GetLatestSoftwareVersionCompletedEventArgs> GetLatestSoftwareVersionCompleted;
        
        public event System.EventHandler<GetReleaseNotesCompletedEventArgs> GetReleaseNotesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PostFeedbackCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PostRecordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LuckyBallData.LBUseManageService.IUseControlService.BeginUserLogin(string devId, int platform, int clientVersion, string info, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserLogin(devId, platform, clientVersion, info, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LuckyBallData.LBUseManageService.IUseControlService.EndUserLogin(System.IAsyncResult result) {
            base.Channel.EndUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string devId = ((string)(inValues[0]));
            int platform = ((int)(inValues[1]));
            int clientVersion = ((int)(inValues[2]));
            string info = ((string)(inValues[3]));
            return ((LuckyBallData.LBUseManageService.IUseControlService)(this)).BeginUserLogin(devId, platform, clientVersion, info, callback, asyncState);
        }
        
        private object[] OnEndUserLogin(System.IAsyncResult result) {
            ((LuckyBallData.LBUseManageService.IUseControlService)(this)).EndUserLogin(result);
            return null;
        }
        
        private void OnUserLoginCompleted(object state) {
            if ((this.UserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserLoginAsync(string devId, int platform, int clientVersion, string info) {
            this.UserLoginAsync(devId, platform, clientVersion, info, null);
        }
        
        public void UserLoginAsync(string devId, int platform, int clientVersion, string info, object userState) {
            if ((this.onBeginUserLoginDelegate == null)) {
                this.onBeginUserLoginDelegate = new BeginOperationDelegate(this.OnBeginUserLogin);
            }
            if ((this.onEndUserLoginDelegate == null)) {
                this.onEndUserLoginDelegate = new EndOperationDelegate(this.OnEndUserLogin);
            }
            if ((this.onUserLoginCompletedDelegate == null)) {
                this.onUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginUserLoginDelegate, new object[] {
                        devId,
                        platform,
                        clientVersion,
                        info}, this.onEndUserLoginDelegate, this.onUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LuckyBallData.LBUseManageService.IUseControlService.BeginGetLatestSoftwareVersion(int platform, ref int version, ref bool forceUpgradingRequired, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestSoftwareVersion(platform, ref version, ref forceUpgradingRequired, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LuckyBallData.LBUseManageService.IUseControlService.EndGetLatestSoftwareVersion(ref int version, ref bool forceUpgradingRequired, System.IAsyncResult result) {
            base.Channel.EndGetLatestSoftwareVersion(ref version, ref forceUpgradingRequired, result);
        }
        
        private System.IAsyncResult OnBeginGetLatestSoftwareVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int platform = ((int)(inValues[0]));
            int version = ((int)(inValues[1]));
            bool forceUpgradingRequired = ((bool)(inValues[2]));
            return ((LuckyBallData.LBUseManageService.IUseControlService)(this)).BeginGetLatestSoftwareVersion(platform, ref version, ref forceUpgradingRequired, callback, asyncState);
        }
        
        private object[] OnEndGetLatestSoftwareVersion(System.IAsyncResult result) {
            int version = this.GetDefaultValueForInitialization<int>();
            bool forceUpgradingRequired = this.GetDefaultValueForInitialization<bool>();
            ((LuckyBallData.LBUseManageService.IUseControlService)(this)).EndGetLatestSoftwareVersion(ref version, ref forceUpgradingRequired, result);
            return new object[] {
                    version,
                    forceUpgradingRequired};
        }
        
        private void OnGetLatestSoftwareVersionCompleted(object state) {
            if ((this.GetLatestSoftwareVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestSoftwareVersionCompleted(this, new GetLatestSoftwareVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestSoftwareVersionAsync(int platform, int version, bool forceUpgradingRequired) {
            this.GetLatestSoftwareVersionAsync(platform, version, forceUpgradingRequired, null);
        }
        
        public void GetLatestSoftwareVersionAsync(int platform, int version, bool forceUpgradingRequired, object userState) {
            if ((this.onBeginGetLatestSoftwareVersionDelegate == null)) {
                this.onBeginGetLatestSoftwareVersionDelegate = new BeginOperationDelegate(this.OnBeginGetLatestSoftwareVersion);
            }
            if ((this.onEndGetLatestSoftwareVersionDelegate == null)) {
                this.onEndGetLatestSoftwareVersionDelegate = new EndOperationDelegate(this.OnEndGetLatestSoftwareVersion);
            }
            if ((this.onGetLatestSoftwareVersionCompletedDelegate == null)) {
                this.onGetLatestSoftwareVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestSoftwareVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestSoftwareVersionDelegate, new object[] {
                        platform,
                        version,
                        forceUpgradingRequired}, this.onEndGetLatestSoftwareVersionDelegate, this.onGetLatestSoftwareVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LuckyBallData.LBUseManageService.IUseControlService.BeginGetReleaseNotes(int platform, int clientVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReleaseNotes(platform, clientVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LuckyBallData.LBUseManageService.IUseControlService.EndGetReleaseNotes(System.IAsyncResult result) {
            return base.Channel.EndGetReleaseNotes(result);
        }
        
        private System.IAsyncResult OnBeginGetReleaseNotes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int platform = ((int)(inValues[0]));
            int clientVersion = ((int)(inValues[1]));
            return ((LuckyBallData.LBUseManageService.IUseControlService)(this)).BeginGetReleaseNotes(platform, clientVersion, callback, asyncState);
        }
        
        private object[] OnEndGetReleaseNotes(System.IAsyncResult result) {
            string retVal = ((LuckyBallData.LBUseManageService.IUseControlService)(this)).EndGetReleaseNotes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReleaseNotesCompleted(object state) {
            if ((this.GetReleaseNotesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReleaseNotesCompleted(this, new GetReleaseNotesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReleaseNotesAsync(int platform, int clientVersion) {
            this.GetReleaseNotesAsync(platform, clientVersion, null);
        }
        
        public void GetReleaseNotesAsync(int platform, int clientVersion, object userState) {
            if ((this.onBeginGetReleaseNotesDelegate == null)) {
                this.onBeginGetReleaseNotesDelegate = new BeginOperationDelegate(this.OnBeginGetReleaseNotes);
            }
            if ((this.onEndGetReleaseNotesDelegate == null)) {
                this.onEndGetReleaseNotesDelegate = new EndOperationDelegate(this.OnEndGetReleaseNotes);
            }
            if ((this.onGetReleaseNotesCompletedDelegate == null)) {
                this.onGetReleaseNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReleaseNotesCompleted);
            }
            base.InvokeAsync(this.onBeginGetReleaseNotesDelegate, new object[] {
                        platform,
                        clientVersion}, this.onEndGetReleaseNotesDelegate, this.onGetReleaseNotesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LuckyBallData.LBUseManageService.IUseControlService.BeginPostFeedback(string feedback, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostFeedback(feedback, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LuckyBallData.LBUseManageService.IUseControlService.EndPostFeedback(System.IAsyncResult result) {
            base.Channel.EndPostFeedback(result);
        }
        
        private System.IAsyncResult OnBeginPostFeedback(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string feedback = ((string)(inValues[0]));
            return ((LuckyBallData.LBUseManageService.IUseControlService)(this)).BeginPostFeedback(feedback, callback, asyncState);
        }
        
        private object[] OnEndPostFeedback(System.IAsyncResult result) {
            ((LuckyBallData.LBUseManageService.IUseControlService)(this)).EndPostFeedback(result);
            return null;
        }
        
        private void OnPostFeedbackCompleted(object state) {
            if ((this.PostFeedbackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostFeedbackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostFeedbackAsync(string feedback) {
            this.PostFeedbackAsync(feedback, null);
        }
        
        public void PostFeedbackAsync(string feedback, object userState) {
            if ((this.onBeginPostFeedbackDelegate == null)) {
                this.onBeginPostFeedbackDelegate = new BeginOperationDelegate(this.OnBeginPostFeedback);
            }
            if ((this.onEndPostFeedbackDelegate == null)) {
                this.onEndPostFeedbackDelegate = new EndOperationDelegate(this.OnEndPostFeedback);
            }
            if ((this.onPostFeedbackCompletedDelegate == null)) {
                this.onPostFeedbackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostFeedbackCompleted);
            }
            base.InvokeAsync(this.onBeginPostFeedbackDelegate, new object[] {
                        feedback}, this.onEndPostFeedbackDelegate, this.onPostFeedbackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LuckyBallData.LBUseManageService.IUseControlService.BeginPostRecord(string record, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostRecord(record, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LuckyBallData.LBUseManageService.IUseControlService.EndPostRecord(System.IAsyncResult result) {
            base.Channel.EndPostRecord(result);
        }
        
        private System.IAsyncResult OnBeginPostRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string record = ((string)(inValues[0]));
            return ((LuckyBallData.LBUseManageService.IUseControlService)(this)).BeginPostRecord(record, callback, asyncState);
        }
        
        private object[] OnEndPostRecord(System.IAsyncResult result) {
            ((LuckyBallData.LBUseManageService.IUseControlService)(this)).EndPostRecord(result);
            return null;
        }
        
        private void OnPostRecordCompleted(object state) {
            if ((this.PostRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostRecordAsync(string record) {
            this.PostRecordAsync(record, null);
        }
        
        public void PostRecordAsync(string record, object userState) {
            if ((this.onBeginPostRecordDelegate == null)) {
                this.onBeginPostRecordDelegate = new BeginOperationDelegate(this.OnBeginPostRecord);
            }
            if ((this.onEndPostRecordDelegate == null)) {
                this.onEndPostRecordDelegate = new EndOperationDelegate(this.OnEndPostRecord);
            }
            if ((this.onPostRecordCompletedDelegate == null)) {
                this.onPostRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostRecordCompleted);
            }
            base.InvokeAsync(this.onBeginPostRecordDelegate, new object[] {
                        record}, this.onEndPostRecordDelegate, this.onPostRecordCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LuckyBallData.LBUseManageService.IUseControlService CreateChannel() {
            return new UseControlServiceClientChannel(this);
        }
        
        private class UseControlServiceClientChannel : ChannelBase<LuckyBallData.LBUseManageService.IUseControlService>, LuckyBallData.LBUseManageService.IUseControlService {
            
            public UseControlServiceClientChannel(System.ServiceModel.ClientBase<LuckyBallData.LBUseManageService.IUseControlService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUserLogin(string devId, int platform, int clientVersion, string info, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = devId;
                _args[1] = platform;
                _args[2] = clientVersion;
                _args[3] = info;
                System.IAsyncResult _result = base.BeginInvoke("UserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UserLogin", _args, result);
            }
            
            public System.IAsyncResult BeginGetLatestSoftwareVersion(int platform, ref int version, ref bool forceUpgradingRequired, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = platform;
                _args[1] = version;
                _args[2] = forceUpgradingRequired;
                System.IAsyncResult _result = base.BeginInvoke("GetLatestSoftwareVersion", _args, callback, asyncState);
                version = ((int)(_args[1]));
                forceUpgradingRequired = ((bool)(_args[2]));
                return _result;
            }
            
            public void EndGetLatestSoftwareVersion(ref int version, ref bool forceUpgradingRequired, System.IAsyncResult result) {
                object[] _args = new object[2];
                _args[0] = version;
                _args[1] = forceUpgradingRequired;
                base.EndInvoke("GetLatestSoftwareVersion", _args, result);
                version = ((int)(_args[0]));
                forceUpgradingRequired = ((bool)(_args[1]));
            }
            
            public System.IAsyncResult BeginGetReleaseNotes(int platform, int clientVersion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = platform;
                _args[1] = clientVersion;
                System.IAsyncResult _result = base.BeginInvoke("GetReleaseNotes", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetReleaseNotes(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetReleaseNotes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPostFeedback(string feedback, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = feedback;
                System.IAsyncResult _result = base.BeginInvoke("PostFeedback", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPostFeedback(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PostFeedback", _args, result);
            }
            
            public System.IAsyncResult BeginPostRecord(string record, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = record;
                System.IAsyncResult _result = base.BeginInvoke("PostRecord", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPostRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PostRecord", _args, result);
            }
        }
    }
}
