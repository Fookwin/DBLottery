//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace LuckyBallsData.DBUserControlService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBUserControlService.IUseControlService")]
    public interface IUseControlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUseControlService/UserLogin", ReplyAction="http://tempuri.org/IUseControlService/UserLoginResponse")]
        System.Threading.Tasks.Task UserLoginAsync(string devId, int platform, int clientVersion, string info);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUseControlService/GetLatestSoftwareVersion", ReplyAction="http://tempuri.org/IUseControlService/GetLatestSoftwareVersionResponse")]
        System.Threading.Tasks.Task<LuckyBallsData.DBUserControlService.GetLatestSoftwareVersionResponse> GetLatestSoftwareVersionAsync(LuckyBallsData.DBUserControlService.GetLatestSoftwareVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUseControlService/GetReleaseNotes", ReplyAction="http://tempuri.org/IUseControlService/GetReleaseNotesResponse")]
        System.Threading.Tasks.Task<string> GetReleaseNotesAsync(int platform, int clientVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUseControlService/PostFeedback", ReplyAction="http://tempuri.org/IUseControlService/PostFeedbackResponse")]
        System.Threading.Tasks.Task PostFeedbackAsync(string feedback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUseControlService/PostRecord", ReplyAction="http://tempuri.org/IUseControlService/PostRecordResponse")]
        System.Threading.Tasks.Task PostRecordAsync(string record);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestSoftwareVersion", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetLatestSoftwareVersionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int platform;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int version;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool forceUpgradingRequired;
        
        public GetLatestSoftwareVersionRequest() {
        }
        
        public GetLatestSoftwareVersionRequest(int platform, int version, bool forceUpgradingRequired) {
            this.platform = platform;
            this.version = version;
            this.forceUpgradingRequired = forceUpgradingRequired;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLatestSoftwareVersionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetLatestSoftwareVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int version;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool forceUpgradingRequired;
        
        public GetLatestSoftwareVersionResponse() {
        }
        
        public GetLatestSoftwareVersionResponse(int version, bool forceUpgradingRequired) {
            this.version = version;
            this.forceUpgradingRequired = forceUpgradingRequired;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUseControlServiceChannel : LuckyBallsData.DBUserControlService.IUseControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UseControlServiceClient : System.ServiceModel.ClientBase<LuckyBallsData.DBUserControlService.IUseControlService>, LuckyBallsData.DBUserControlService.IUseControlService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UseControlServiceClient() : 
                base(UseControlServiceClient.GetDefaultBinding(), UseControlServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUseControlService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UseControlServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(UseControlServiceClient.GetBindingForEndpoint(endpointConfiguration), UseControlServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UseControlServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UseControlServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UseControlServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UseControlServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UseControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task UserLoginAsync(string devId, int platform, int clientVersion, string info) {
            return base.Channel.UserLoginAsync(devId, platform, clientVersion, info);
        }
        
        public System.Threading.Tasks.Task<LuckyBallsData.DBUserControlService.GetLatestSoftwareVersionResponse> GetLatestSoftwareVersionAsync(LuckyBallsData.DBUserControlService.GetLatestSoftwareVersionRequest request) {
            return base.Channel.GetLatestSoftwareVersionAsync(request);
        }
        
        public System.Threading.Tasks.Task<string> GetReleaseNotesAsync(int platform, int clientVersion) {
            return base.Channel.GetReleaseNotesAsync(platform, clientVersion);
        }
        
        public System.Threading.Tasks.Task PostFeedbackAsync(string feedback) {
            return base.Channel.PostFeedbackAsync(feedback);
        }
        
        public System.Threading.Tasks.Task PostRecordAsync(string record) {
            return base.Channel.PostRecordAsync(record);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUseControlService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUseControlService)) {
                return new System.ServiceModel.EndpointAddress("http://dbdataquery.cloudapp.net/DBUseControlService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return UseControlServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUseControlService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return UseControlServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUseControlService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IUseControlService,
        }
    }
}
