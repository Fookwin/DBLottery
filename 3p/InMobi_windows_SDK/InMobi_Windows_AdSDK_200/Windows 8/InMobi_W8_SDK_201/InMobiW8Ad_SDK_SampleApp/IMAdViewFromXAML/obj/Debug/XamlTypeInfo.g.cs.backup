//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace IMAdViewFromXAML
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_InterstitialAd() { return new global::IMAdViewFromXAML.InterstitialAd(); }

        private object Activate_1_IMAdView() { return new global::InMobi.W8.AdSDK.IMAdView(); }

        private object Activate_5_IMAdRequest() { return new global::InMobi.W8.AdSDK.IMAdRequest(); }

        private object Activate_6_List() { return new global::System.Collections.Generic.List<global::System.String>(); }

        private object Activate_8_UserLatLong() { return new global::InMobi.W8.AdSDK.UserLatLong(); }

        private object Activate_9_UserLocation() { return new global::InMobi.W8.AdSDK.UserLocation(); }

        private object Activate_13_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>(); }

        private object Activate_14_MainPage() { return new global::IMAdViewFromXAML.MainPage(); }

        private void VectorAdd_6_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private void MapAdd_13_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.String)item;
            collection.Add(newKey, newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Int32":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "String":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Object":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Boolean":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Double":
                xamlType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "IMAdViewFromXAML.InterstitialAd":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IMAdViewFromXAML.InterstitialAd), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_InterstitialAd;
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.IMAdView":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.IMAdView), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_1_IMAdView;
                userType.AddMemberName("RefreshInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AdSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AppId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AnimationType");
                userType.AddMemberName("IMAdRequest");
                userType.AddMemberName("RefTag");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AdTextColor");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AdBackgroundColor");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.IMAdAnimationType":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.IMAdAnimationType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NONE", global::InMobi.W8.AdSDK.IMAdAnimationType.NONE);
                userType.AddEnumValue("CURL_UP", global::InMobi.W8.AdSDK.IMAdAnimationType.CURL_UP);
                userType.AddEnumValue("SLIDE_IN_LEFT", global::InMobi.W8.AdSDK.IMAdAnimationType.SLIDE_IN_LEFT);
                userType.AddEnumValue("SLIDE_IN_RIGHT", global::InMobi.W8.AdSDK.IMAdAnimationType.SLIDE_IN_RIGHT);
                userType.AddEnumValue("CURL_DOWN", global::InMobi.W8.AdSDK.IMAdAnimationType.CURL_DOWN);
                userType.AddEnumValue("FLIP_FROM_LEFT", global::InMobi.W8.AdSDK.IMAdAnimationType.FLIP_FROM_LEFT);
                userType.AddEnumValue("FLIP_FROM_RIGHT", global::InMobi.W8.AdSDK.IMAdAnimationType.FLIP_FROM_RIGHT);
                userType.AddEnumValue("FADE_OUT", global::InMobi.W8.AdSDK.IMAdAnimationType.FADE_OUT);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.IMAdRequest":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.IMAdRequest), GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_IMAdRequest;
                userType.AddMemberName("LocationInquiryAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Keywords");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::System.String>),
                                                   "System.Collections.Generic.List<String>");
                userType.AddMemberName("Age");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Income");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DateOfBirth");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("LatLong");
                userType.AddMemberName("Location");
                userType.AddMemberName("Education");
                userType.AddMemberName("Ethnicity");
                userType.AddMemberName("Gender");
                userType.AddMemberName("AreaCode");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PostalCode");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Interests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::System.String>),
                                                   "System.Collections.Generic.List<String>");
                userType.AddMemberName("SearchString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ParamsDictionary");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>),
                                                   "System.Collections.Generic.Dictionary<String, String>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<String>":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::System.String>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::System.String>),
                                                   "System.Collections.Generic.List<String>");
                userType.Activator = Activate_6_List;
                userType.CollectionAdd = VectorAdd_6_List;
                xamlType = userType;
                break;

            case "System.Nullable<System.DateTime>":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.DateTime>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.UserLatLong":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.UserLatLong), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_UserLatLong;
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.UserLocation":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.UserLocation), GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_UserLocation;
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.EducationType":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.EducationType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::InMobi.W8.AdSDK.EducationType.None);
                userType.AddEnumValue("HighSchool", global::InMobi.W8.AdSDK.EducationType.HighSchool);
                userType.AddEnumValue("SomeCollege", global::InMobi.W8.AdSDK.EducationType.SomeCollege);
                userType.AddEnumValue("InCollege", global::InMobi.W8.AdSDK.EducationType.InCollege);
                userType.AddEnumValue("BachelorsDegree", global::InMobi.W8.AdSDK.EducationType.BachelorsDegree);
                userType.AddEnumValue("MastersDegree", global::InMobi.W8.AdSDK.EducationType.MastersDegree);
                userType.AddEnumValue("DoctoralDegree", global::InMobi.W8.AdSDK.EducationType.DoctoralDegree);
                userType.AddEnumValue("Other", global::InMobi.W8.AdSDK.EducationType.Other);
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.EthnicityType":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.EthnicityType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::InMobi.W8.AdSDK.EthnicityType.None);
                userType.AddEnumValue("Mixed", global::InMobi.W8.AdSDK.EthnicityType.Mixed);
                userType.AddEnumValue("Asian", global::InMobi.W8.AdSDK.EthnicityType.Asian);
                userType.AddEnumValue("Black", global::InMobi.W8.AdSDK.EthnicityType.Black);
                userType.AddEnumValue("Hispanic", global::InMobi.W8.AdSDK.EthnicityType.Hispanic);
                userType.AddEnumValue("NativeAmerican", global::InMobi.W8.AdSDK.EthnicityType.NativeAmerican);
                userType.AddEnumValue("White", global::InMobi.W8.AdSDK.EthnicityType.White);
                userType.AddEnumValue("Other", global::InMobi.W8.AdSDK.EthnicityType.Other);
                xamlType = userType;
                break;

            case "InMobi.W8.AdSDK.GenderType":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::InMobi.W8.AdSDK.GenderType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::InMobi.W8.AdSDK.GenderType.None);
                userType.AddEnumValue("Male", global::InMobi.W8.AdSDK.GenderType.Male);
                userType.AddEnumValue("Female", global::InMobi.W8.AdSDK.GenderType.Female);
                xamlType = userType;
                break;

            case "System.Collections.Generic.Dictionary<String, String>":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>),
                                                   "System.Collections.Generic.Dictionary<String, String>");
                userType.Activator = Activate_13_Dictionary;
                userType.DictionaryAdd = MapAdd_13_Dictionary;
                xamlType = userType;
                break;

            case "IMAdViewFromXAML.MainPage":
                userType = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IMAdViewFromXAML.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::InMobiW8AdSDK.InMobi_W8_SDK_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_IMAdView_RefreshInterval(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.RefreshInterval;
        }
        private void set_0_IMAdView_RefreshInterval(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.RefreshInterval = (global::System.Int32)Value;
        }
        private object get_1_IMAdView_AdSize(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.AdSize;
        }
        private void set_1_IMAdView_AdSize(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.AdSize = (global::System.Int32)Value;
        }
        private object get_2_IMAdView_AppId(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.AppId;
        }
        private void set_2_IMAdView_AppId(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.AppId = (global::System.String)Value;
        }
        private object get_3_IMAdView_AnimationType(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.AnimationType;
        }
        private void set_3_IMAdView_AnimationType(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.AnimationType = (global::InMobi.W8.AdSDK.IMAdAnimationType)Value;
        }
        private object get_4_IMAdView_IMAdRequest(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.IMAdRequest;
        }
        private void set_4_IMAdView_IMAdRequest(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.IMAdRequest = (global::InMobi.W8.AdSDK.IMAdRequest)Value;
        }
        private object get_5_IMAdView_RefTag(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.RefTag;
        }
        private void set_5_IMAdView_RefTag(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.RefTag = (global::System.String)Value;
        }
        private object get_6_IMAdView_AdTextColor(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.AdTextColor;
        }
        private void set_6_IMAdView_AdTextColor(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.AdTextColor = (global::System.String)Value;
        }
        private object get_7_IMAdView_AdBackgroundColor(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            return that.AdBackgroundColor;
        }
        private void set_7_IMAdView_AdBackgroundColor(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdView)instance;
            that.AdBackgroundColor = (global::System.String)Value;
        }
        private object get_8_IMAdRequest_LocationInquiryAllowed(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.LocationInquiryAllowed;
        }
        private void set_8_IMAdRequest_LocationInquiryAllowed(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.LocationInquiryAllowed = (global::System.Boolean)Value;
        }
        private object get_9_IMAdRequest_Keywords(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Keywords;
        }
        private void set_9_IMAdRequest_Keywords(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Keywords = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_10_IMAdRequest_Age(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Age;
        }
        private void set_10_IMAdRequest_Age(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Age = (global::System.Int32)Value;
        }
        private object get_11_IMAdRequest_Income(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Income;
        }
        private void set_11_IMAdRequest_Income(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Income = (global::System.Double)Value;
        }
        private object get_12_IMAdRequest_DateOfBirth(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.DateOfBirth;
        }
        private void set_12_IMAdRequest_DateOfBirth(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.DateOfBirth = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_13_IMAdRequest_LatLong(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.LatLong;
        }
        private void set_13_IMAdRequest_LatLong(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.LatLong = (global::InMobi.W8.AdSDK.UserLatLong)Value;
        }
        private object get_14_IMAdRequest_Location(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Location;
        }
        private void set_14_IMAdRequest_Location(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Location = (global::InMobi.W8.AdSDK.UserLocation)Value;
        }
        private object get_15_IMAdRequest_Education(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Education;
        }
        private void set_15_IMAdRequest_Education(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Education = (global::InMobi.W8.AdSDK.EducationType)Value;
        }
        private object get_16_IMAdRequest_Ethnicity(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Ethnicity;
        }
        private void set_16_IMAdRequest_Ethnicity(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Ethnicity = (global::InMobi.W8.AdSDK.EthnicityType)Value;
        }
        private object get_17_IMAdRequest_Gender(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Gender;
        }
        private void set_17_IMAdRequest_Gender(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Gender = (global::InMobi.W8.AdSDK.GenderType)Value;
        }
        private object get_18_IMAdRequest_AreaCode(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.AreaCode;
        }
        private void set_18_IMAdRequest_AreaCode(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.AreaCode = (global::System.String)Value;
        }
        private object get_19_IMAdRequest_PostalCode(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.PostalCode;
        }
        private void set_19_IMAdRequest_PostalCode(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.PostalCode = (global::System.String)Value;
        }
        private object get_20_IMAdRequest_Interests(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.Interests;
        }
        private void set_20_IMAdRequest_Interests(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.Interests = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_21_IMAdRequest_SearchString(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.SearchString;
        }
        private void set_21_IMAdRequest_SearchString(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.SearchString = (global::System.String)Value;
        }
        private object get_22_IMAdRequest_ParamsDictionary(object instance)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            return that.ParamsDictionary;
        }
        private void set_22_IMAdRequest_ParamsDictionary(object instance, object Value)
        {
            var that = (global::InMobi.W8.AdSDK.IMAdRequest)instance;
            that.ParamsDictionary = (global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember xamlMember = null;
            global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "InMobi.W8.AdSDK.IMAdView.RefreshInterval":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "RefreshInterval", "Int32");
                xamlMember.Getter = get_0_IMAdView_RefreshInterval;
                xamlMember.Setter = set_0_IMAdView_RefreshInterval;
                break;
            case "InMobi.W8.AdSDK.IMAdView.AdSize":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AdSize", "Int32");
                xamlMember.Getter = get_1_IMAdView_AdSize;
                xamlMember.Setter = set_1_IMAdView_AdSize;
                break;
            case "InMobi.W8.AdSDK.IMAdView.AppId":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AppId", "String");
                xamlMember.Getter = get_2_IMAdView_AppId;
                xamlMember.Setter = set_2_IMAdView_AppId;
                break;
            case "InMobi.W8.AdSDK.IMAdView.AnimationType":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AnimationType", "InMobi.W8.AdSDK.IMAdAnimationType");
                xamlMember.Getter = get_3_IMAdView_AnimationType;
                xamlMember.Setter = set_3_IMAdView_AnimationType;
                break;
            case "InMobi.W8.AdSDK.IMAdView.IMAdRequest":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "IMAdRequest", "InMobi.W8.AdSDK.IMAdRequest");
                xamlMember.Getter = get_4_IMAdView_IMAdRequest;
                xamlMember.Setter = set_4_IMAdView_IMAdRequest;
                break;
            case "InMobi.W8.AdSDK.IMAdView.RefTag":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "RefTag", "String");
                xamlMember.Getter = get_5_IMAdView_RefTag;
                xamlMember.Setter = set_5_IMAdView_RefTag;
                break;
            case "InMobi.W8.AdSDK.IMAdView.AdTextColor":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AdTextColor", "String");
                xamlMember.Getter = get_6_IMAdView_AdTextColor;
                xamlMember.Setter = set_6_IMAdView_AdTextColor;
                break;
            case "InMobi.W8.AdSDK.IMAdView.AdBackgroundColor":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdView");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AdBackgroundColor", "String");
                xamlMember.Getter = get_7_IMAdView_AdBackgroundColor;
                xamlMember.Setter = set_7_IMAdView_AdBackgroundColor;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.LocationInquiryAllowed":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "LocationInquiryAllowed", "Boolean");
                xamlMember.Getter = get_8_IMAdRequest_LocationInquiryAllowed;
                xamlMember.Setter = set_8_IMAdRequest_LocationInquiryAllowed;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Keywords":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Keywords", "System.Collections.Generic.List<String>");
                xamlMember.Getter = get_9_IMAdRequest_Keywords;
                xamlMember.Setter = set_9_IMAdRequest_Keywords;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Age":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Age", "Int32");
                xamlMember.Getter = get_10_IMAdRequest_Age;
                xamlMember.Setter = set_10_IMAdRequest_Age;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Income":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Income", "Double");
                xamlMember.Getter = get_11_IMAdRequest_Income;
                xamlMember.Setter = set_11_IMAdRequest_Income;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.DateOfBirth":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "DateOfBirth", "System.Nullable<System.DateTime>");
                xamlMember.Getter = get_12_IMAdRequest_DateOfBirth;
                xamlMember.Setter = set_12_IMAdRequest_DateOfBirth;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.LatLong":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "LatLong", "InMobi.W8.AdSDK.UserLatLong");
                xamlMember.Getter = get_13_IMAdRequest_LatLong;
                xamlMember.Setter = set_13_IMAdRequest_LatLong;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Location":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Location", "InMobi.W8.AdSDK.UserLocation");
                xamlMember.Getter = get_14_IMAdRequest_Location;
                xamlMember.Setter = set_14_IMAdRequest_Location;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Education":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Education", "InMobi.W8.AdSDK.EducationType");
                xamlMember.Getter = get_15_IMAdRequest_Education;
                xamlMember.Setter = set_15_IMAdRequest_Education;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Ethnicity":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Ethnicity", "InMobi.W8.AdSDK.EthnicityType");
                xamlMember.Getter = get_16_IMAdRequest_Ethnicity;
                xamlMember.Setter = set_16_IMAdRequest_Ethnicity;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Gender":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Gender", "InMobi.W8.AdSDK.GenderType");
                xamlMember.Getter = get_17_IMAdRequest_Gender;
                xamlMember.Setter = set_17_IMAdRequest_Gender;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.AreaCode":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "AreaCode", "String");
                xamlMember.Getter = get_18_IMAdRequest_AreaCode;
                xamlMember.Setter = set_18_IMAdRequest_AreaCode;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.PostalCode":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "PostalCode", "String");
                xamlMember.Getter = get_19_IMAdRequest_PostalCode;
                xamlMember.Setter = set_19_IMAdRequest_PostalCode;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.Interests":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "Interests", "System.Collections.Generic.List<String>");
                xamlMember.Getter = get_20_IMAdRequest_Interests;
                xamlMember.Setter = set_20_IMAdRequest_Interests;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.SearchString":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "SearchString", "String");
                xamlMember.Getter = get_21_IMAdRequest_SearchString;
                xamlMember.Setter = set_21_IMAdRequest_SearchString;
                break;
            case "InMobi.W8.AdSDK.IMAdRequest.ParamsDictionary":
                userType = (global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlUserType)GetXamlTypeByName("InMobi.W8.AdSDK.IMAdRequest");
                xamlMember = new global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlMember(this, "ParamsDictionary", "System.Collections.Generic.Dictionary<String, String>");
                xamlMember.Getter = get_22_IMAdRequest_ParamsDictionary;
                xamlMember.Setter = set_22_IMAdRequest_ParamsDictionary;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlSystemBaseType
    {
        global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::IMAdViewFromXAML.IMAdViewFromXAML_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


